<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="org.as3utils"><apiName>org.as3utils</apiName><apiClassifier id="org.as3utils:ReflectionUtil"><apiName>ReflectionUtil</apiName><shortdesc>
	 Provides a very basic reflection API.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Provides a very basic reflection API.
	 <p>This is a static class and shouldn't be instantiated.</p>
	 
	 </apiDesc><example>
	 
	 <b>getClassName()</b>
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import org.as3coreaddendum.system.Reflection;
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var str  :String             = "";
	 var s    :Sprite             = new Sprite();
	 var n    :NumberComparator   = new NumberComparator();
	 
	 Reflection.getClassName(str)                 // String
	 Reflection.getClassName(String)              // String
	   
	 Reflection.getClassName(s)                   // Sprite
	 Reflection.getClassName(Sprite)              // Sprite
	 
	 Reflection.getClassName(n)                   // NumberComparator
	 Reflection.getClassName(NumberComparator)    // NumberComparator
	 </codeblock>
	 
	 <b>getClassPackage()</b>
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import org.as3coreaddendum.system.Reflection;
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var str  :String             = "";
	 var s    :Sprite             = new Sprite();
	 var n    :NumberComparator   = new NumberComparator();
	 
	 Reflection.getClassPackage(str)                 // null
	 Reflection.getClassPackage(String)              // null
	   
	 Reflection.getClassPackage(s)                   // flash.display
	 Reflection.getClassPackage(Sprite)              // flash.display
	 
	 Reflection.getClassPackage(n)                   // org.as3coreaddendum.system.comparators
	 Reflection.getClassPackage(NumberComparator)    // org.as3coreaddendum.system.comparators
	 </codeblock>
	 
	 <b>getClassPath()</b>
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import org.as3coreaddendum.system.Reflection;
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var str  :String             = "";
	 var s    :Sprite             = new Sprite();
	 var n    :NumberComparator   = new NumberComparator();
	 
	 Reflection.getClassPath(str)                 // String
	 Reflection.getClassPath(String)              // String
	   
	 Reflection.getClassPath(s)                   // flash.display.Sprite
	 Reflection.getClassPath(Sprite)              // flash.display.Sprite
	 
	 Reflection.getClassPath(n)                   // org.as3coreaddendum.system.comparators.NumberComparator
	 Reflection.getClassPath(NumberComparator)    // org.as3coreaddendum.system.comparators.NumberComparator
	 </codeblock>
	 
	 <b>getSuperClassName()</b>
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import org.as3coreaddendum.system.Reflection;
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var str  :String             = "";
	 var s    :Sprite             = new Sprite();
	 var n    :NumberComparator   = new NumberComparator();
	 
	 Reflection.getSuperClassName(str)                 // Object
	 Reflection.getSuperClassName(String)              // Object
	   
	 Reflection.getSuperClassName(s)                   // DisplayObjectContainer
	 Reflection.getSuperClassName(Sprite)              // DisplayObjectContainer
	 
	 Reflection.getSuperClassName(n)                   // Object
	 Reflection.getSuperClassName(NumberComparator)    // Object
	 </codeblock>
	 
	 <b>getSuperClassPackage()</b>
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import org.as3coreaddendum.system.Reflection;
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var str  :String             = "";
	 var s    :Sprite             = new Sprite();
	 var n    :NumberComparator   = new NumberComparator();
	 
	 Reflection.getSuperClassPackage(str)                 // null
	 Reflection.getSuperClassPackage(String)              // null
	   
	 Reflection.getSuperClassPackage(s)                   // flash.display
	 Reflection.getSuperClassPackage(Sprite)              // flash.display
	 
	 Reflection.getSuperClassPackage(n)                   // null
	 Reflection.getSuperClassPackage(NumberComparator)    // null
	 </codeblock>
	 
	 <b>getSuperClassPath()</b>
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import org.as3coreaddendum.system.Reflection;
	 import org.as3coreaddendum.system.comparators.NumberComparator;
	 
	 var str  :String             = "";
	 var s    :Sprite             = new Sprite();
	 var n    :NumberComparator   = new NumberComparator();
	 
	 Reflection.getSuperClassPath(str)                 // Object
	 Reflection.getSuperClassPath(String)              // Object
	   
	 Reflection.getSuperClassPath(s)                   // flash.display.DisplayObjectContainer
	 Reflection.getSuperClassPath(Sprite)              // flash.display.DisplayObjectContainer
	 
	 Reflection.getSuperClassPath(n)                   // Object
	 Reflection.getSuperClassPath(NumberComparator)    // Object
	 </codeblock>
	 
	 </example></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:BooleanUtil"><apiName>BooleanUtil</apiName><shortdesc>
	 A utility class to work with Boolean objects.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to work with <codeph>Boolean</codeph> objects.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:DrawUtil"><apiName>DrawUtil</apiName><shortdesc>
	 A utility class for working with drawings.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class for working with drawings.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:MathUtil"><apiName>MathUtil</apiName><shortdesc>
	 A utility class for working with mathematical operations.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class for working with mathematical operations.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:EquatableUtil"><apiName>EquatableUtil</apiName><shortdesc>
	 A utility class to work with objects that implement org.as3coreaddendum.system.IEquatable.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to work with objects that implement <codeph>org.as3coreaddendum.system.IEquatable</codeph>.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:RandomUtil"><apiName>RandomUtil</apiName><shortdesc>
	 A utility class for working with random numbers.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class for working with random numbers.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:StringUtil"><apiName>StringUtil</apiName><shortdesc>
	 A utility class to work with String objects.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to work with <codeph>String</codeph> objects.
	 <p>StringUtil handles <codeph>null</codeph> input Strings quietly. That is to say that a <codeph>null</codeph> input will return <codeph>null</codeph>.
	 Where a <codeph>Boolean</codeph> or <codeph>int</codeph> is being returned details vary by method.</p>
	 <p>Some terms used by this class related to <codeph>String</codeph> handling:</p>
	 <p><ul>
	 <li>empty: a zero-length <codeph>String</codeph> ("")</li>
	 <li>space: the space character (" ", char 32)</li>
	 <li>blank: a <codeph>String</codeph> object only with control chars (space, \t, \n, \s)</li>
	 </ul></p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:URLUtil"><apiName>URLUtil</apiName><shortdesc>
	 A utility class to work with URL strings.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to work with <codeph>URL</codeph> strings.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:ArrayUtil"><apiName>ArrayUtil</apiName><shortdesc>
	 A utility class to work with Array objects.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to work with <codeph>Array</codeph> objects.
	 <p>ArrayUtil handles <codeph>null</codeph> input arrays quietly in almost all methods.
	 When not, it's documented in the method.
	 That is to say that a <codeph>null</codeph> input will not thrown an error in almost all methods.</p>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="org.as3utils:ByteConversionUtil"><apiName>ByteConversionUtil</apiName><shortdesc>
	 A utility class for working with conversion of bytes.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class for working with conversion of bytes.
	 
	 </apiDesc></apiClassifierDetail><apiValue id="org.as3utils:ByteConversionUtil:GIGABYTE"><apiName>GIGABYTE</apiName><shortdesc>
		 Defines the value of 1 gigabyte in bytes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1073741824</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Defines the value of 1 gigabyte in bytes.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3utils:ByteConversionUtil:KILOBYTE"><apiName>KILOBYTE</apiName><shortdesc>
		 Defines the value of 1 kilobyte in bytes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1024</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Defines the value of 1 kilobyte in bytes.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3utils:ByteConversionUtil:MEGABYTE"><apiName>MEGABYTE</apiName><shortdesc>
		 Defines the value of 1 megabyte in bytes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1048576</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Defines the value of 1 megabyte in bytes.
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.as3utils:ByteConversionUtil:TERABYTE"><apiName>TERABYTE</apiName><shortdesc>
		 Defines the value of 1 terabyte in bytes.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1099511627776</apiData><apiType value="Number"/></apiValueDef><apiDesc>
		 Defines the value of 1 terabyte in bytes.
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.as3utils:NumberUtil"><apiName>NumberUtil</apiName><shortdesc>
	 A utility class to work with Number objects.</shortdesc><prolog><author>Flávio Silva
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A utility class to work with <codeph>Number</codeph> objects.
	 
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage></allClasses>